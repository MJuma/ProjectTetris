/*
 * Mohammad Juma
 * 
 * TCSS 305 - Autumn 2012
 * Project Tetris
 * November 22, 2012
 */

package tetris.gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.Timer;

import tetris.board.Board;

/**
 * The Tetris Game Panel for drawing the Tetrominos.
 * 
 * @author Mohammad Juma
 * @version 11-22-2012
 */
@SuppressWarnings("serial")
public class TetrisPanel extends JPanel implements Observer
{
  /**
   * The default width of the game panel.
   */
  private static final int DEFAULT_WIDTH = 250;

  /**
   * The default height of the game panel.
   */
  private static final int DEFAULT_HEIGHT = 500;

  /**
   * The size of each Tetromino block.
   */
  private static final int DEFAULT_BLOCK_SIZE = 25;

  /**
   * The default delay of the timer in milliseconds.
   */
  private static final int DEFAULT_DELAY = 1000;

  /**
   * The background color of the board.
   */
  private static final Color BACKGROUND_COLOR = new Color(105, 105, 105);

  /**
   * The color of the grid lines.
   */
  private static final Color GRID_COLOR = new Color(139, 137, 137);

  /**
   * The factor by which the delay is reduced every level.
   */
  private static final double DELAY_FACTOR = .9;

  /**
   * The tetris board.
   */
  private final Board my_board;

  /**
   * The game timer.
   */
  private final Timer my_timer;

  /**
   * Flag to set the game state. True when playing and
   * false when stopped or paused.
   */
  private boolean my_pause_state;
  
  /**
   * Flag to check if the game is over.
   */
  private boolean my_game_ended;

  /**
   * The block size.
   */
  private int my_block_size;

  /**
   * Creates a new game panel for drawing the Tetrominos.
   * @param the_board The game board.
   */
  public TetrisPanel(final Board the_board)
  {
    super();
    setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT));
    setBackground(BACKGROUND_COLOR);
    my_timer = new Timer(DEFAULT_DELAY, new GameStepListener());
    my_board = the_board;
    my_board.addObserver(this);
    my_block_size = DEFAULT_BLOCK_SIZE;
  }

  /**
   * Paints the board and the Tetromino in play.
   * 
   * @param the_graphics The graphics context to use for painting.
   */
  public void paintComponent(final Graphics the_graphics)
  {
    super.paintComponent(the_graphics);
    final Graphics2D g2d = (Graphics2D) the_graphics;
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                         RenderingHints.VALUE_ANTIALIAS_ON);

    final List<Color[]> board = my_board.getBoard();
    for (int m = 0; m < my_board.getHeight(); m++)
    {
      for (int n = 0; n < my_board.getWidth(); n++)
      {
        g2d.setColor(GRID_COLOR);
        g2d.drawRect(n * my_block_size, m * my_block_size, my_block_size, my_block_size);
        if (board.get(m)[n] != Color.DARK_GRAY)
        {
          g2d.setColor(board.get(m)[n]);
          g2d.fill3DRect(n * my_block_size, m * my_block_size,
                         my_block_size, my_block_size, true);
        }
      }
    }

    g2d.setColor(Color.WHITE);
    g2d.setStroke(new BasicStroke(2));
    for (int m = 0; m < my_board.getGhost().points().length; m++)
    {
      g2d.drawRect(my_board.getGhost().points()[m].x * my_block_size,
                     my_board.getGhost().points()[m].y * my_block_size,
                     my_block_size, my_block_size);
    }
    
    g2d.setColor(my_board.getTetromino().getColor());
    for (int m = 0; m < my_board.getTetromino().points().length; m++)
    {
      g2d.fill3DRect(my_board.getTetromino().points()[m].x * my_block_size,
                     my_board.getTetromino().points()[m].y * my_block_size,
                     my_block_size, my_block_size, true);
    }
    

    if (my_game_ended)
    {
      showGameOverText(g2d, getHeight());
    }
  }

  /**
   * Sets the block size.
   * @param the_block_size The new block size.
   */
  public void setBlockSize(final int the_block_size)
  {
    my_block_size = the_block_size;
  }

  /**
   * Toggles the state of the game from running to not running.
   */
  public void gameToggle()
  {
    if (!my_game_ended)
    {
      my_pause_state ^= true;
      if (my_pause_state)
      {
        my_timer.start();
      }
      else
      {
        my_timer.stop();
      }
    }
  }

  /**
   * Returns whether the game is running or not.
   * @return my_pause_state
   */
  public boolean gameState()
  {
    return my_pause_state;
  }

  /**
   * Changes the timer delay.
   */
  public void reduceDelay()
  { 
    my_timer.setDelay((int) (my_timer.getDelay() * DELAY_FACTOR));
  }

  /**
   * Ends the game and stops drawing.
   */
  public void endGame()
  {
    my_timer.stop();
    my_pause_state = false;
    my_game_ended = true;
    repaint();
  }
  
  /**
   * Shows the game over text.
   * @param the_g2d The graphics to paint with.
   * @param the_height The height of the component.
   */
  private void showGameOverText(final Graphics2D the_g2d, final int the_height)
  {
    the_g2d.setColor(Color.BLACK);
    the_g2d.setFont(new Font("Helvetica", Font.BOLD, 45));
    the_g2d.drawString("Game Over", 5, the_height / 2);
  }
  
  /**
   * The update method for the Observer interface.
   * 
   * @param the_obj The observable that called us.
   * @param the_arg The argument it passed us.
   */
  public void update(final Observable the_obj, final Object the_arg)
  { 
    if (the_arg == TetrisObserverEvents.Repaint)
    {
      repaint();
    }
    else if (the_arg == TetrisObserverEvents.GameOver)
    {
      endGame();
    }
  }

  /**
   * The Game Step Listener is responsible for stepping the game as the timer counts.
   * 
   * @author Mohammad Juma
   * @version 11-22-2012
   */
  private class GameStepListener implements ActionListener
  {
    /**
     * Handles game stepping.
     * @param the_event The event that occurred.
     */
    public void actionPerformed(final ActionEvent the_event)
    {
      my_board.step();
      repaint();
    }
  }
}
