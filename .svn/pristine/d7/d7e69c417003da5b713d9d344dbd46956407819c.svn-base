/*
 * Mohammad Juma
 * 
 * TCSS 305 - Autumn 2012
 * Project Tetris
 * November 22, 2012
 */

package tetris.gui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * The menu bar for the TetrisGUI.
 * 
 * @author Mohammad Juma
 * @version 11-22-2012
 */
public class TetrisMenu
{
  private final TetrisControls my_keys;
  
  /**
   * The games menu bar.
   */
  private final JMenuBar my_menu_bar;

  /**
   * Creates a new JMenuBar.
   */
  public TetrisMenu(final TetrisControls the_keys)
  {
    my_menu_bar = new JMenuBar();
    createMenuBar();
    my_keys = the_keys;
  }

  /**
   * Returns a created menu bar.
   * @return my_menu_bar The created menu bar.
   */
  public JMenuBar getMenuBar()
  {
    return my_menu_bar;
  }

  /**
   * Creates the menu bar.
   */
  private void createMenuBar()
  {
    my_menu_bar.add(fileMenu());
    my_menu_bar.add(optionsMenu());
    my_menu_bar.add(controlsMenu());
    my_menu_bar.add(helpMenu());
  }

  /**
   * Creates the file menu.
   * @return file_menu The file menu.
   */
  private JMenu fileMenu()
  {
    final JMenu file_menu = new JMenu("File");

    return file_menu;
  }

  /**
   * Creates the options menu.
   * @return options_menu The file menu.
   */
  private JMenu optionsMenu()
  {
    final JMenu options_menu = new JMenu("Options");

    return options_menu;
  }

  /**
   * Creates the controls menu.
   * @return controls_menu The file menu.
   */
  private JMenu controlsMenu()
  {
    final JMenu controls_menu = new JMenu("Controls");
    final JMenuItem edit_controls = new JMenuItem("Edit Controls");
    edit_controls.addActionListener(new ActionListener()
    {
      public void actionPerformed(final ActionEvent the_event)
      {
        controlsEditor();
      }
    });
    controls_menu.add(edit_controls);
    return controls_menu;
  }

  /**
   * Creates the help menu.
   * @return help_menu The file menu.
   */
  private JMenu helpMenu()
  {
    final JMenu help_menu = new JMenu("Help");

    return help_menu;
  }



  /**
   * Frame for editing controls.
   * @return frame The frame.
   */
  private JFrame controlsEditor()
  {
    final JPanel panel = new JPanel(new GridBagLayout());
    final GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(2, 2, 2, 2);
    for (int i = 0; i < my_keys.getControls().length; i++)
    {
      String key_name;
      final int key_number = i;
      if (my_keys.getControls()[i] == 0)
      {
        key_name = "Undefined";
      }
      else
      {
        key_name = KeyEvent.getKeyText(my_keys.getControls()[i]);
      }
      final JButton key_button = new JButton(key_name);
      key_button.addActionListener(new ActionListener()
      {
        public void actionPerformed(final ActionEvent the_event)
        {
          key_button.addKeyListener(new KeyAdapter()
          {
            public void keyPressed(final KeyEvent the_event)
            {      
              my_keys.setControls(key_number, the_event.getKeyCode());
              key_button.removeKeyListener(this);
            }
          });
        }
      });
      addComponents(new JLabel(my_keys.getControlNames()[i]), key_button, panel, gbc);
    }
    final JFrame frame = new JFrame();
    frame.getContentPane().add(panel);
    frame.setSize(300,400);
    frame.setLocation(200,200);
    frame.setVisible(true);
    return frame;
  }

  /**
   * Adds components to the game controls panel.
   * @param the_label The control name;
   * @param the_button The controls edit button.
   * @param the_panel The panel the controls are in.
   * @param the_gbc The grid bag constant.
   */
  private void addComponents(final JLabel the_label, final JButton the_button,
                             final JPanel the_panel, final GridBagConstraints the_gbc)
  {
    the_gbc.anchor = GridBagConstraints.EAST;
    the_gbc.gridwidth = GridBagConstraints.RELATIVE;
    the_panel.add(the_label, the_gbc);
    the_gbc.anchor = GridBagConstraints.WEST;
    the_gbc.gridwidth = GridBagConstraints.REMAINDER;
    the_panel.add(the_button, the_gbc);
  }
}
