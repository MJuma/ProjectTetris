/*
 * Mohammad Juma
 * 
 * TCSS 305 - Autumn 2012
 * Project Tetris
 * November 22, 2012
 */

package tetris.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JPanel;

import tetris.pieces.Tetromino;

/**
 * JPanel class for drawing the currently held Tetromino.
 * 
 * @author Mohammad Juma
 * @version 11-22-2012
 */
@SuppressWarnings("serial")
public class TetrisHoldPanel extends JPanel
{
  /**
   * The default width of the game panel.
   */
  private static final int DEFAULT_WIDTH = 100;

  /**
   * The default height of the game panel.
   */
  private static final int DEFAULT_HEIGHT = 100;

  /**
   * The size of each Tetromino block.
   */
  private static final int BLOCK_SIZE = 25;

  /**
   * The Tetromino currently being held.
   */
  private Tetromino my_tetromino;
  
  /**
   * Creates a new JPanel for holding the Tetromino.
   */
  public TetrisHoldPanel()
  {
    super();
    setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT));
    setBackground(Color.DARK_GRAY);
  }

  /**
   * Paints the panel holding the Tetromino..
   * 
   * @param the_graphics The graphics context to use for painting.
   */
  public void paintComponent(final Graphics the_graphics)
  {
    super.paintComponent(the_graphics);
    final Graphics2D g2d = (Graphics2D) the_graphics;
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                         RenderingHints.VALUE_ANTIALIAS_ON);
    if (my_tetromino != null)
    {
      for (int m = 0; m < my_tetromino.localPoints().length; m++)
      {
        g2d.setColor(my_tetromino.getColor());
        g2d.fillRect(my_tetromino.localPoints()[m].x * BLOCK_SIZE,
                     my_tetromino.localPoints()[m].y * BLOCK_SIZE,
                     BLOCK_SIZE, BLOCK_SIZE);
      }
    }
    g2d.setColor(Color.BLACK);
    for (int m = 0; m < (DEFAULT_WIDTH / BLOCK_SIZE); m++)
    {
      for (int n = 0; n < (DEFAULT_HEIGHT / BLOCK_SIZE); n++)
      {
        g2d.drawRect(m * BLOCK_SIZE, n * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
      }
    }
  }
  
  /**
   * The Tetromino to hold.
   * @param the_tetromino The Tetromino to hold.
   */
  public void setHold(final Tetromino the_tetromino)
  {
    my_tetromino = the_tetromino;
    repaint();
  }
}
