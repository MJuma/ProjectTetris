/*
 * Mohammad Juma
 * 
 * TCSS 305 - Autumn 2012
 * Project Tetris
 * November 22, 2012
 */

package tetris.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

import javax.swing.JPanel;

import tetris.pieces.Tetromino;

/**
 * JPanel class for holding the next sequence of Tetrominos.
 * 
 * @author Mohammad Juma
 * @version 11-22-2012
 */
@SuppressWarnings("serial")
public class TetrisSequencePanel extends JPanel
{
  /**
   * The default width of the game panel.
   */
  private static final int DEFAULT_WIDTH = 100;

  /**
   * The default height of the game panel.
   */
  private static final int DEFAULT_HEIGHT = 400;

  /**
   * The size of each Tetromino block.
   */
  private static final int BLOCK_SIZE = 25;

  /**
   * The next Tetromino.
   */
  private Tetromino[] my_tetrominos;
  
  /**
   * Creates the panel holding the next sequence of Tetrominos.
   */
  public TetrisSequencePanel()
  {
    super();
    setPreferredSize(new Dimension(DEFAULT_WIDTH, DEFAULT_HEIGHT));
    setBackground(Color.DARK_GRAY);
  }
  
  /**
   * Paints the panel holding the next Tetromino.
   * 
   * @param the_graphics The graphics context to use for painting.
   */
  public void paintComponent(final Graphics the_graphics)
  {
    super.paintComponent(the_graphics);
    final Graphics2D g2d = (Graphics2D) the_graphics;
    g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                         RenderingHints.VALUE_ANTIALIAS_ON);
    if (my_tetrominos != null)
    {
      for (int i = 0; i < my_tetrominos.length; i++)
      {
        g2d.setColor(my_tetrominos[i].getColor());
        for (int j = 0; j < my_tetrominos[i].localPoints().length; j++)
        {
          g2d.fillRect(my_tetrominos[i].localPoints()[j].x * BLOCK_SIZE,
                       my_tetrominos[i].localPoints()[j].y * BLOCK_SIZE + (i * 4 * BLOCK_SIZE),
                       BLOCK_SIZE, BLOCK_SIZE);
        }
      }
    }
    g2d.setColor(Color.BLACK);
    for (int m = 0; m < (DEFAULT_WIDTH / BLOCK_SIZE); m++)
    {
      for (int n = 0; n < (DEFAULT_HEIGHT / BLOCK_SIZE); n++)
      {
        g2d.drawRect(m * BLOCK_SIZE, n * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
      }
    }
  }
  
  /**
   * Sets the sequence of Tetrominos.
   * @param the_tetrominos The sequence of Tetrominos.
   */
  public void setSequence(final Tetromino[] the_tetrominos)
  {
    my_tetrominos = the_tetrominos.clone();
    repaint();
  }

}
